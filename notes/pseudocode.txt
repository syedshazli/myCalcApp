 * first, let's make a simple calculator. From there, we can decide if we want to expand
 * Here's the thing about a calculator. You should be able to complete any amount of operations.
 * 
 * What operations would you like to complete? add for a for add, s for subtract, m for multiply, d for divide,
                                                     r for remainder, q for quit. etc"

 * IF ITS A VALID LETTER, USER GIVES A OPERATION... ELSE WE ASK TO TRY AGAIN
 * 
 * BASED ON THE OPERATION.... (MAY NEED MULTIPLE CLASSES. OR INHERITANCE PATTERN LMAO)
 *   Subtract. Give me the two numbers you'd like to subtract. Ex: 5 10 will subtract 5 from 10, and I will output 5
 *   Multiply: Give me the two numbers you'd like to multiply
 *   Add: Give me the numbers you'd like to add
 *   Divide, give me the numbers you'd like to divide from each other (same input as subtraction) 
 *   Remainder: Give me the two numbers and I'll find the remainder (same input as subtraction) (could be polymorphism w/divide class)
 * 
 *   Give the user the final output based on the operation. Make sure to handle edge cases like division by zero, as NAN
 *       EX: Your result is 5. Would you like to (c)lear, (a)dd, (s)ubtract, (m)ultiply, (d)ivide, (r)emainder, or quit?
